const e=e=>null==e;class s extends HTMLElement{constructor(){super(),this.props={},this.labels=[]}connectedCallback(){this.props=(s=>{const n=(e=>e.find((e=>"data"===e.nodeName)))([...s]),t=[...s].filter((e=>"data"!==e.nodeName)).reduce(((e,s)=>({...e,[s.nodeName]:s.nodeValue})),{});if(e(n))return t;try{return{...t,...JSON.parse(n.nodeValue)}}catch(e){console.log("ERROR: No data",e,n?.nodeValue)}})(this.attributes),this.render()}render(){const{labels:e=[],direction:s="column"}=this.props;if(this.classList.add(""+("row"===s?"direction-row":"direction-"+s)),0===e.length)return"";this.labels=e,this.innerHTML=`${this.renderLabels()}`}renderLabels(){return this.labels.map((e=>{const{name:s="",bgColor:n="",color:t=""}=e;return`<mark class="t-3xs-500"\n                            ${n&&t&&`style="background: ${n}; color: ${t}"`}>\n                            <span aria-hidden="true">${s}</span>\n                            <span class="sr-only">${s}</span>\n                        </mark>`})).join("")}}customElements.get("nb-card-labels")||customElements.define("nb-card-labels",s);export{s as default};
