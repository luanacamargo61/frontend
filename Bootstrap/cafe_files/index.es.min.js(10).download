const e=e=>null==e;class n extends HTMLElement{constructor(){super(),this.props={}}connectedCallback(){this.props=(n=>{const t=(e=>e.find((e=>"data"===e.nodeName)))([...n]),s=[...n].filter((e=>"data"!==e.nodeName)).reduce(((e,n)=>({...e,[n.nodeName]:n.nodeValue})),{});if(e(t))return s;try{return{...s,...JSON.parse(t.nodeValue)}}catch(e){console.log("ERROR: No data",e,t?.nodeValue)}})(this.attributes),this.render()}render(){let{hide:e,stars:n,hide_star_number:t="false"}=this.props;n=parseFloat(n).toFixed(2),n>e&&this.render(),this.classList.add("nb-rating");const s=new Array(5).fill('<nb-icon icon="32/symbol/star"></nb-icon>').join("");this.innerHTML=`\n        <div class="stars">\n            <span class="bottom">${s}</span>\n            <span class="top" style="width: ${2*n*10}%">${s}</span>\n        </div>\x3c!--\n        --\x3e${"true"===t?"":`<p>${n}</p>`}\n    `}}customElements.get("nb-rating")||customElements.define("nb-rating",n);export{n as default};
