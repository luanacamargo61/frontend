const e=e=>null==e;class n extends HTMLElement{connectedCallback(){this.props=(n=>{const s=(e=>e.find((e=>"data"===e.nodeName)))([...n]),t=[...n].filter((e=>"data"!==e.nodeName)).reduce(((e,n)=>({...e,[n.nodeName]:n.nodeValue})),{});if(e(s))return t;try{return{...t,...JSON.parse(s.nodeValue)}}catch(e){console.log("ERROR: No data",e,s?.nodeValue)}})(this.attributes),this.render()}render(){const{icon:e,icon_size:n="",label:s,classname:t="t-2xs-500",sub_label:a="",sub_classname:o=""}=this.props;this.innerHTML=`\n            <nb-icon icon="${e}"></nb-icon>\n            <p class="${t}">\n                ${s}\n                ${a&&`<span>${a}</span>`}\n            </p>\n        `,""!==o&&this.querySelector("span").classList.add(o),""!==n&&this.style.setProperty("--icon-size",n/16+"rem")}}customElements.get("nb-icon-text")||customElements.define("nb-icon-text",n);export{n as default};
